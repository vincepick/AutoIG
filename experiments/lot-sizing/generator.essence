$lot-sizing
$ written by: Ian Miguel (ijm@st-andrews.ac.uk)
$$$$ CSPLib 58: https://www.csplib.org/Problems/prob058/
$$$$ Let the tuner decide the following: $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ Different item types to produce (upper bounds derived by looking at competition data).
given tuner_nb_item_types: int(1..20)
letting Items be domain int(1..tuner_nb_item_types)
letting Items0 be domain int(0..tuner_nb_item_types)

$ Total number of orders
given tuner_nb_orders_delta: int(0..10)
letting tuner_nb_orders be tuner_nb_item_types + tuner_nb_orders_delta
letting Orders be domain int(1..tuner_nb_orders)
letting Orders0 be domain int(0..tuner_nb_orders)

$ Time periods available. Upper bound derived by looking at competition data.
given tuner_nb_periods: int(1..30)
letting Periods be domain int(1..tuner_nb_periods)

$ cost for inventory for one period of time. Upper bound from competition data
given tuner_inventory_cost: int(1..10)

$ Replicate given parameters with find statements so they appear in the output.
find nb_orders: int(1..tuner_nb_orders)
find nb_item_types: int(1..tuner_nb_orders)
find nb_periods: int(1..tuner_nb_periods)
find inventory_cost: int(1..tuner_inventory_cost)

$$$$ Fill in the details of orders, costs, etc $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

$ The due date of each order.
find due_period: matrix indexed by[Orders] of Periods

$ the cost of changing from item i to item j
$ UB from example data
find change_cost: matrix indexed by[Orders0, Orders0] of int(0..200)

$ the number of orders for the item type
$ NB Insisting on at least one instance of each type.
find nb_of_orders: matrix indexed by[Items] of int(1..tuner_nb_orders)

$ maps each order to its item type
find item_type: matrix indexed by[Orders0] of Items0

$$$$ Constrain the generator problem variables to take sensible values $$$$$$$$$

such that

$ Bind the tuner parameters to the fake decision variables for the output.
nb_orders = tuner_nb_orders,
nb_item_types = tuner_nb_item_types,
nb_periods = tuner_nb_periods,
inventory_cost = tuner_inventory_cost,

$ The sum of nb_of_orders, which records no of orders per item type = nb_orders
sum(nb_of_orders) = tuner_nb_orders,

$ In the data, the orders are ordered by item type.
$ So we force item_type to be non-decreasing with the right no of occurrences.
forAll i: Orders .
  item_type[i] >= item_type[i-1],
$ 0th entry of item_type is always 0
item_type[0] = 0,
$ Number of occurrences of other values governed by nb_of_orders
forAll i: Items .
  (sum j : int(1..tuner_nb_orders) . toInt(item_type[j] = i))
  =
  nb_of_orders[i],

$ sequence-dependent changeover costs, respect the triangle inequality
forAll i: Orders .
  forAll j: Orders .
    forAll k: Orders .
      ((i != j) /\ (j != k) /\ (i != k)) ->
      (change_cost[i, j] + change_cost[j, k]) >= change_cost[i, k],

$ leading diagonal of change cost obviously 0
forAll i: Orders0 .
  change_cost[i,i] = 0,

$ First row and first col of change cost also 0
forAll i: Orders0 .
  change_cost[i,0] = 0,
forAll i: Orders0 .
  change_cost[0,i] = 0,

true
